1. 데이터 타입
 1-1. 숫자형 데이터 타입
  - 숫자형 데이터 타입은 4가지 타입이 있다. 대부분 NUMBER를 사용한다.
  - NUMBER(P,S)
	-> P -> 소수점을 포함한 전체 자릿수를 의미
	-> S -> 소수점 자릿수를 의미한다.
  - NUMBER는 가변숫자 이므로 P와 S를 입력하지 않으면 데이터의 크기에 맞게 자동으로 조절된다.

	입력값		타입			저장되는값
	123.89 		NUMBER		123.89
	123.89		NUMBER(3)	124		-> 한 자리만 입력 = P만 입력
	123.89		NUMBER(3,2)	오류	 	-> 오류 ( 정수자리가 더 중요한데 소수점 자릿수가 2개라서 생기는 오류) 
	123.89		NUMBER(4,2)	오류		-> 오류 ( 위와같음 )
	123.89		NUMBER(5,2)	123.89
	123.89		NUMBER(6,1)	123.9
	123.89		NUMBER(6,-2)	100

 1-2. 날짜 데이터 타입
  - 가장 일반적으로 쓰는 데이터 타입은 DATE 타입이다.

 1-3. LOB 데이터 타입
  - LOB이란, Large Object 의 약자로 대용량 데이터를 저장할 수 있는 데이터 타입이다.
  일반적으로 그래픽, 이미지, 사운드 등 비정형 데이터를 저장할 때 LOB 타입을 사용한다.
  - 문자형 대용량 데이터는 CLOB이나, NCLOB, 그래픽, 이미지, 동영상의 데이터는 BLOB을 주로 사용한다.

2. DDL(Data Definition Language)
  - 데이터의 구조를 정의하기 위한 테이블 생성, 삭제 같은 명령어
  - create	: 테이블 생성
  - drop 	: 테이블 삭제
  - alter	: 테이블 수정
  - truncate	: 테이블에 있는 모든 데이터 삭제 

3. 데이터 조작어 (DML)
  - select : 데이터 조회 (R)
  - insert : 데이터 입력 (C)
  - update : 데이터 수정 (U)
  - delete : 데이터 삭제 (D)

 3-1. insert
	- 특정 컬럼
	insert into 테이블명 ( 컬럼1, 컬럼2, ... )
	values (값1, 값2, ...)

	- 전체 컬럼
	insert into 테이블명 values ( 값1, 값2, ... )

 3-2. update
	update 테이블명
	set 컬럼1 = 값, 컬럼2 = 값, ...
	where 조건..;	( where 빠지면 모든 데이터에 대해서 명령이 실행됨 )

 3-3. delete
	delete (from) 테이블명
	where 조건;


4. Drop vs Truncate vs Delete
 4-1. Drop
  - 만들었던 테이블이 싹 다 삭제된다. 존재 자체가 삭제
  - 복구가 불가능

 4-2. Truncate
  - 데이터만 통 삭제
  - 테이블 안에 들어있던 모든 레코드들을 제거하는 명령어
  - table 구조를 삭제하는게 아니다.
  - 테이블을 drop 했다가 create 한다.
  - 모든 행을 삭제하기 위한 가장 빠르고 효율적인 방법이다.
  - 복구가 불가능

 4-3. delete
  - 데이터를 골라서 삭제
  - truncate 처럼 테이블의 구조는 남기고, 안의 데이터만 삭제한다.
  - delete는 조건에 해당하는 것만 지울 수도 있고 전체를 지울수도 있는 이유가 한줄 한줄 삭제를 하기 때문이다.
  - 데이터가 삭제되어도 빈 테이블이나 클러스터에 그대로 남아있기 때문에 복구가 가능하다.

5. COMMIT & ROLLBACK
 5-1. COMMIT
  - 모든 작업을 정상적으로 처리하겠다고 확정하는 명령어이다.
  - 트랜잭션의 처리 과정을 데이터베이스에 반영하기 위해서, 변경된 내용을 모두 영구 저장한다.
  - COMMIT을 수행하면 하나의 트랜잭션 과정을 종료하게 된다.
  - TRANSACTION ( INSERT , UPDATE, DELETE ) 작업 내용을 실제 DB에 저장한다.
  - 이전 데이터가 완전히 적용된다.
  - 모든 사용자가 변경한 데이터의 결과를 볼 수 있다. 

 5-2. ROLLBACK
  - 작업 중 문제가 발생했을 때, 트랜젝션의 처리 과정에서 발생한 변경사항을 취소하고, 트랜젝션 과정을 종료시킨다.
  - 트랜젝션으로 인한 하나의 묶음처리가 시작되기 이전의 상태로 되돌린다.
  - TRANSACTION ( INSERT, UPDATE, DELETE ) 작업 내용을 취소한다.
  - 이전 COMMIT한 곳까지만 복구한다.
  - 트랜젝션 작업 중 하나라도 문제가 발생한다면, 모든 작업을 취소해야 하기 때문에 하나의 논리적인 작업 단위로 구성해 놓아야 한다.
  - 문제가 발생하면 논리적인 작업단위를 모두 취소해 버리면 되기 때문이다.

 5-3. COMMIT 명령어와 ROLLBACK 명령어의 장점
  - 데이터 무결성이 보장된다.
  - 논리적으로 연관된 작업을 그룹화 할 수 있다.

 5-4. 자동 rollback 되는 경우
  -  비정상적인 종료

 5-5. 자동 commit 되는 경우
  - DDL문 ( create, alter, drop, truncate )
  - DCL문 ( grant, revoke ) 사용 권한
  - insert, update, delete 작업 후 commit 하지 않고, 오라클 정상 종료시에 ?

6. 데이터 제어어(DCL)
  - 사용자에게 권한 생성 혹은 권한 삭제 같은 명령어
  - grant	: 권한 생성
  - revoke	: 권한 삭제

7. 컬럼 속성 ( 무결성 제약 조건 )
  - not null			: 널값이 입력되지 못하게 하는 조건
  - unique			: 중복된 값이 입력되지 못하게 하는 조건
  - check			: 주어진 값만 허용하는 조건
  - primary key		: not null + unique + index
  - foreign key		: 다른 테이블의 필드(컬럼)를 참조해서 무결성을 검사하는 조건


 7-1. 기본키 ( Primary Key)
  - 기본키는 기본적인 제약조건들 테이블을 생성할 때 같이 정의한다.
  - 테이블당 하나만 정의가능하다. ( 두 개 이상의 컬럼으로 정의가 될 때, 묶어서 하나로 본다. 조합키 / 복합키 라고 한다. )
  - 주 키 / 기본키 / 식별자 / PK 등으로 불리고 있다.
  - 자동 INDEX가 생성되는데 이는 검색 키로써 검색 속도를 향상시킨다.
  - not null + unique + index

 7-2. 기본키 선언 방법
  - create table pkTest(
	col1		varchar2(10) primary key;
	col2		varchar2(10),
	constraints pk_name primary key(col2)
);

 7-3. Foreign Key ( 외래키 )
  - 외부키, 외래키, 참조키, 외부 식별자, FK 등으로 불린다.
  - FK가 정의된 테이블은 자식 테이블이라고 칭한다.
  - 참조되는 테이블, 즉 PK가 있는 테이블을 부모 테이블이라고 한다.
  - 부모 테이블의 PK 컬럼에 존재하는 데이터만 자식 테이블에 입력할 수 있다.
  - 부모테이블은 자식의 데이터나 테이블이 삭제되어도 영향을 받지 않습니다.
  - 참조하는 데이터 컬럼과 데이터 타입이 반드시 일치해야한다.
  - 참조할 수 있는 컬럼은 기본키(PK) 이거나 unique 만 가능하다.
  ( 보통은 pk랑 엮는다 )


 7-4. FK 선언 방법

 create table pTable(
	p_pk		number		primary key
);

 create table cTable(
	c_pk		number		primary key
	p_pk		number ,
	constraints fk_name foreign key (p_pk)
	references pTable(p_pk) on delete cascade
);


  - 참조할 컬럼과 같은 컬럼이 자식 테이블에 존재해야 한다.
  같은 이름을 쓸 필요는 없지만, 관계를 알아보기 쉽게 같은 컬럼명을 사용한다.
  - 그리고 자식 테이블에 값을 먼저 넣을 순 없다.
  - 참조되는 컬럼에 데이터가 있어야지만 값을 넣을 수 있다.



 7-5. 삭제 옵션
  - on delete cascade
	-> 참조되는 부모 테이블의 행에 대한 delete를 허용한다.
	-> 즉, 참조되는 부모 테이블 값이 삭제되면 연쇄적으로 자식 테이블값 역시 삭제된다.



  - on delete set null
	-> 참조되는 부모 테이블의 행에 대한 delete를 허용한다.
	-> 이건 cascade와 다르게 부모 테이블의 값이 삭제되면 해당 테이블을 참조하는 자식테이블의
	값들은 null 값으로 설정된다.






















 






 