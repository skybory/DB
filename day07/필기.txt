1. 뷰 ( view )

 1-1. 뷰란 ? 
  - 하나의 가상 테이블이라고 생각하면 된다.
  - 작업을 하다 보면 자주 조회하는 데이터들이 있다. 한 테이블에 데이터가 있으면 조회하기 편하겠지만
  그렇지 않은 경우가 있다.
  - 여러 테이블을 join하여 가져오고 쿼리가 복잡한 경우도 있다.
  이런 경우 쿼리로 뷰를 만들어 놓고 사용하면 편리하다.
  - 뷰는 보안에도 유리하다. 테이블에 데이터를 노출시키고 싶지 않을 때, 뷰를 사용해서 보여줄 데이터만
  뷰로 제공할 수 있다.

 1-2. 뷰의 사용 목적
  - 뷰를 만들어 놓으면 복잡한 쿼리를 쉽게 작성 가능
  - 원하는 컬럼만 공개하여 원천데이터 테이블 비공개 가능, 보안성 up
 
 1-3. 뷰의 특징
  - 원천데이터가 변경되면 view 데이터도 자동으로 변경된다.
  - 뷰의 검색은 자유로우나, 삽입, 삭제 수정은 제약이 있다.
  - 뷰 생성 쿼리에 함수를 사용하면 반드시 alias를 지정해야 한다.
  - 데이터를 물리적으로 갖진 않지만 논리적인 집합을 갖는다.

2. 시퀀스 ( Sequence )
 2-1. 시퀀스란?
  - 연속적인 번호를 만들어 주는 기능
  - 시퀀스란 자동으로 순차적으로 증가하는 순번을 반환하는 데이터베이스 객체이다.
  - 보통 PK값에 중복을 방지하기 위해 사용한다. 예를 들어 게시판에 글이 하나 추가될 때 마다
  글 번호 ( PK ) 가 생겨야 한다고 생각해보자.
  만약 100번까지 글 번호가 생성되어 있다면 그 다음 글이 추가가 되었을 경우 글 번호가 101로 하나의
  row를 생성해 주어야한다.
  이 때, 101이라는 숫자를 얻으려면 기존 글 번호 중 가장 큰 값에 +1 을 하는 로직을 어딘가에 넣어야 한다.
  그렇지만 시퀀스를 사용하면 이러한 로직이 필요없이 데이터베이스에 row가 추가될 때 마다 자동으로 +1을 시켜주어
  매우 편리하다.

 2-2. 시퀀스 생성
  - start with n		: 초기 값 세팅
  - increment by n	: 증가값
  - maxvalue n 		: 최댓값 n 고정
  - nomaxvalue		: 최댓값이 없음 ( 무한대값 )
  - minvalue n 		: 최솟값 n 고정
  - nominvalue		: 최솟값이 없음 ( 무한소값 )
  - cycle			: maxvalue 에 도달했을 때 다시
  - nocycle			: min value부터 시작 할지/말지 결정
  - cache			: 예를 들어 우리가 1000개의 레코드를 삽입.
				캐시를 20으로 두면 oracle data dictionary 에
				50번 접근해야 하지만, 200으로 해둔다면 5번이면 된다.

3. index
 3-1. 인덱스란?
  - 조회 속도를 향상시키기 위한 데이터베이스 검색 기술
  - 색인 이라는 뜻으로 해당 테이블의 조회 결과를 빠르게 하기 위해 사용
  - 즉, 인덱스가 필요한 이유는 인덱스를 생성해 줌으로써 조회 속도를 빠르게 할 수 있다.  

 3-2. 인덱스의 생성 원리
 - 인덱스를 테이블의 특정 컬럼에 한개 이상 주게 되면
  인덱스 테이블이 따로 만들어지고, 인덱스 컬럼의 로우값과 rowID 값이 저장되며 로우값은
  정렬된 트리 구조로 저장시켜 두었다가 검색시 좀 더 빠르게 해당 데이터를 찾는데 도움을 준다.
  ( 테이블을 생성하고 컬럼을 만든 후, 데이터를 삽입하면 하나의 row가 생성되며 이 row는 절대적인 주소를 가지게 되는데
  이를 rowid 라고 한다. )
  - 하지만 DML 명령을 사용할 때는 원본 Table은 물론이고, Index Table에도 데이터를 갱신해주어야 하기 때문에, update,
insert,delete 명령을 쓸 때 속도가 느려진다.
  - 따라서 무조건 인덱스를 생성한다고 좋은 것 만은 아니고, 꼭 필요할 때만 분별하게 생성해 주어야 한다.

 3-3.  인덱스 생성이 불필요한 경우
  - 데이터가 적은 ( 수천건 미만 ) 경우에는 인덱스를 설정하지 않는게 오히려 성능이 좋다.
  - 조회보다 삽입, 수정, 삭제 처리가 많은 테이블
  - 조회 결과 전체행의 15% 이상 읽어들일 것으로 예상될 때


 3-4. 인덱스 사용시 취약점
  - insert : 인덱스 split현상으로 부하가 걸린다. block이 두 개로 갈라지는 현상.
  - delete : 인덱스에서는 데이터를 사용하지 않음으로 표시하고 지우지 않는다.
  - update : 인덱스에서는 delete를 한 후에, 새로운 데이터를 insert 작업을 한다.

 3-5. index 생성
  - unique 인덱스
 : 인덱스를 사용한 컬럼의 중복값들을 포함하지 않고 사용할 수 있다.
	create unique index 인덱스 명
	on 테이블명 ( 컬럼 );

  - not-unique 인덱스
 : 인덱스를 사용한 컬럼의 중복 데이터 값을 가질 수 있다.
	create index 인덱스 명
	on 테이블명 ( 컬럼 );















































